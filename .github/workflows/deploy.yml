name: Deploy to Hostinger
run-name: ${{ github.actor }} is running the CI/CD ðŸš€

on:
  push:
    branches:
      - main

jobs:
  audit-backend:
    name: "Backend Audit"
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: app/backend
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: "app/backend/package-lock.json"
      - run: npm ci
      - run: npm audit

  test-unit:
    name: "Unit Tests"
    runs-on: ubuntu-latest
    needs: [audit-backend]
    defaults:
      run:
        working-directory: app/backend
    services:
      mysql:
        image: mysql:latest
        env:
          MYSQL_ROOT_PASSWORD: root
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h localhost --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    env:
      APP_CLIENT_ID: ${{ secrets.APP_CLIENT_ID }}
      APP_CLIENT_SECRET: ${{ secrets.APP_CLIENT_SECRET }}
      DB_HOST: ${{ secrets.DB_HOST }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_NAME: ${{ secrets.DB_NAME }}
      DB_PORT: ${{ secrets.DB_PORT }}
      PORT: ${{ secrets.PORT }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: "app/backend/package-lock.json"
      - run: npm ci
      - run: npm run test:ci

  deploy-frontend:
    name: "Deploy Frontend to Hostinger"
    runs-on: ubuntu-latest
    needs: [test-unit]
    defaults:
      run:
        working-directory: app/frontend
    steps:
      - uses: actions/checkout@v4
        with:
          ssh-keys: ${{ secrets.DEPLOY_KEY }}  # Utilise la clÃ© de dÃ©ploiement GitHub

      # Debug : Afficher le rÃ©pertoire personnel et son contenu
      - name: Debug Home Directory
        run: |
          echo "RÃ©pertoire HOME: $HOME"
          ls -la $HOME

      # Debug : VÃ©rifier et crÃ©er le dossier .ssh
      - name: Create SSH Directory with Debug
        run: |
          if [ -d "$HOME/.ssh" ]; then
            echo "Le dossier $HOME/.ssh existe dÃ©jÃ ."
          elif [ -e "$HOME/.ssh" ]; then
            echo "Un fichier ou un lien nommÃ© $HOME/.ssh existe dÃ©jÃ . Suppression..."
            rm -f $HOME/.ssh
          fi
          echo "CrÃ©ation du dossier $HOME/.ssh"
          mkdir -p $HOME/.ssh
          ls -la $HOME/.ssh

      # Debug : Ajouter l'hÃ´te Hostinger aux known_hosts
      - name: Add Hostinger to known_hosts with Debug
        run: |
          echo "Lancement de ssh-keyscan pour l'hÃ´te ${{ secrets.HOSTINGER_HOST }} sur le port ${{ secrets.HOSTINGER_REMOTE_PORT }}"
          ssh-keyscan -p ${{ secrets.HOSTINGER_REMOTE_PORT }} ${{ secrets.HOSTINGER_HOST }} >> $HOME/.ssh/known_hosts
          echo "Contenu de known_hosts :"
          cat $HOME/.ssh/known_hosts

      # Debug : Tester la connexion SSH
      - name: Test SSH Connection with Debug
        run: |
          echo "Test de la connexion SSH..."
          ssh -p ${{ secrets.HOSTINGER_REMOTE_PORT }} ${{ secrets.HOSTINGER_USER }}@${{ secrets.HOSTINGER_HOST }} "ls -la"

      # DÃ©ploiement avec rsync
      - name: Deploy with rsync
        run: |
          rsync -avz -e "ssh -p ${{ secrets.HOSTINGER_REMOTE_PORT }}" \
            ./public/ ${{ secrets.HOSTINGER_USER }}@${{ secrets.HOSTINGER_HOST }}:"/home/${{ secrets.HOSTINGER_USER }}/public_html/"

  deploy-backend:
    name: "Deploy Backend to VPS"
    runs-on: ubuntu-latest
    needs: [test-unit]
    defaults:
      run:
        working-directory: app/backend
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: "app/backend/package-lock.json"
      - run: npm ci
      - uses: easingthemes/ssh-deploy@v2.1.5
        with:
          source: "app/backend/"
          target: ${{ secrets.VPS_BACKEND_TARGET }}
          remote_host: ${{ secrets.VPS_HOST }}
          remote_user: ${{ secrets.VPS_USER }}
          ssh_private_key: ${{ secrets.VPS_SSH_KEY }}
          remote_port: ${{ secrets.VPS_REMOTE_PORT }}
          args: "-rltgoDzvO --delete"
