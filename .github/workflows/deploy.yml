name: Deploy to Hostinger
run-name: ${{ github.actor }} is running the CI/CD üöÄ

on:
  push:
    branches:
      - main

jobs:
  # 1 AUDIT
  audit:
    name: "Audit Dependencies"
    runs-on: ubuntu-latest

    steps:
      - name: Clone repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: "package-lock.json"

      - name: Install dependencies
        run: npm ci

      - name: Audit
        run: npm audit

  test_unit:
    name: "Unit Tests"
    runs-on: ubuntu-latest
    needs: [audit]
# On d√©clare ici le service MySQL
    services:
      mysql:
        image: mysql:latest
        env:
          MYSQL_ROOT_PASSWORD: root
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h localhost --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    # Variables d'environnement pour ce job
    env:
      APP_CLIENT_ID: ${{ secrets.APP_CLIENT_ID }}
      APP_CLIENT_SECRET: ${{ secrets.APP_CLIENT_SECRET }}
      DB_HOST: ${{ secrets.DB_HOST }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD}}
      DB_NAME: ${{ secrets.DB_NAME}}
      DB_PORT: ${{ secrets.DB_PORT}}
      PORT: ${{ secrets.PORT}}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: "package-lock.json"

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm run test:ci

  # 2 TEST E2E (avec matrice + service Docker MySQL)
  test_e2e:
    name: "E2E Tests"
    runs-on: ubuntu-latest
    needs: [test_unit]
    strategy:
      matrix:
        browser: [chrome, edge]

    # On d√©clare ici le service MySQL
    services:
      mysql:
        image: mysql:latest
        env:
          MYSQL_ROOT_PASSWORD: root
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h localhost --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    # Variables d'environnement pour ce job
    env:
      CLIENT_ID: ${{ secrets.APP_CLIENT_ID }}
      CLIENT_SECRET: ${{ secrets.APP_CLIENT_SECRET }}
      DB_HOST: ${{ secrets.DB_HOST }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD}}
      DB_NAME: ${{ secrets.DB_NAME}}
      DB_PORT: ${{ secrets.DB_PORT}}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: "package-lock.json"

      - name: Install dependencies
        run: npm ci

      - name: Setup environment
        run: |
          chmod +x script/setup-env.sh
          ./script/setup-env.sh ${{ secrets.DB_USER }} ${{ secrets.DB_PASSWORD }} ${{ secrets.DB_HOST }} ${{ secrets.DB_PORT }} ${{ secrets.DB_NAME }}

      - name: Wait for MySQL
        run: |
          sudo apt-get update
          sudo apt-get install -y mysql-client
          until mysqladmin ping -h 127.0.0.1 --port=3306 --user=root --password=root --silent; do
            echo "Waiting for MySQL..."
            sleep 5
          done
          echo "MySQL is up"

      - name: Create database
        run: |
          mysql -h 127.0.0.1 -P 3306 -u root -proot -e "CREATE DATABASE IF NOT EXISTS db_git;"

      - name: Run Cypress E2E tests on ${{ matrix.browser }}
        uses: cypress-io/github-action@v6
        with:
          browser: ${{ matrix.browser }}
          start: npm start
          wait-on: http://localhost:8000
          wait-on-timeout: 60
          config: baseUrl=http://localhost:8000

  # 3 DEPLOY (d√©pend des tests e2e)
  deploy:
    name: "Deploy to Hostinger"
    runs-on: ubuntu-latest
    needs: [test_e2e]

    steps:
      - name: Clone repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: "package-lock.json"

      - name: Install dependencies
        run: npm ci

      - name: Deploy to Hostinger
        uses: easingthemes/ssh-deploy@v2.1.5
        with:
          source: "public/"
          target: ${{ secrets.HOSTINGER_TARGET }}
          remote_host: ${{ secrets.HOSTINGER_HOST }}
          remote_user: ${{ secrets.HOSTINGER_USER }}
          ssh_private_key: ${{ secrets.SSH_PRIVATE_KEY }}
          remote_port: ${{ secrets.HOSTINGER_REMOTE_PORT }}
          args: "-rltgoDzvO --delete"
